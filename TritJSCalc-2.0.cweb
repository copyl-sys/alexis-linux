@* Binary/Trinary Conversion Functions.
These functions enable conversion between native binary integers and the internal
trinary representation (TritBigInt).

@c
/* Converts a binary integer (int) to a TritBigInt representing the number in base 3.
   The resulting TritBigInt is allocated using malloc (not memory-mapped). */
TritError binary_to_trit(int num, TritBigInt** result) {
    int sign = (num < 0) ? 1 : 0;
    int abs_val = (num < 0) ? -num : num;
    if (abs_val == 0) {
        *result = malloc(sizeof(TritBigInt));
        if (!*result) return TRIT_ERR_MEM;
        (*result)->sign = 0;
        (*result)->len = 1;
        (*result)->digits = malloc(sizeof(Trit));
        if (!(*result)->digits) { free(*result); return TRIT_ERR_MEM; }
        (*result)->digits[0] = 0;
        (*result)->is_mapped = 0;
        return TRIT_OK;
    }
    int capacity = 16;
    Trit* digits = malloc(capacity * sizeof(Trit));
    if (!digits) return TRIT_ERR_MEM;
    int index = 0;
    while (abs_val > 0) {
        if (index >= capacity) {
            capacity *= 2;
            Trit* new_digits = realloc(digits, capacity * sizeof(Trit));
            if (!new_digits) { free(digits); return TRIT_ERR_MEM; }
            digits = new_digits;
        }
        digits[index++] = abs_val % TRIT_MAX;
        abs_val /= TRIT_MAX;
    }
    /* Reverse the digits to form the correct order (most-significant digit first) */
    for (int i = 0; i < index/2; i++) {
        Trit temp = digits[i];
        digits[i] = digits[index - i - 1];
        digits[index - i - 1] = temp;
    }
    *result = malloc(sizeof(TritBigInt));
    if (!*result) { free(digits); return TRIT_ERR_MEM; }
    (*result)->sign = sign;
    (*result)->len = index;
    (*result)->digits = digits;
    (*result)->is_mapped = 0;  /* Allocated normally */
    return TRIT_OK;
}

/* Converts a TritBigInt (trinary representation) to a binary integer.
   The result is stored in the provided integer pointer. */
TritError trit_to_binary(TritBigInt* tri, int* result) {
    if (!tri || !result) return TRIT_ERR_INPUT;
    int value = 0;
    for (int i = 0; i < tri->len; i++) {
        value = value * TRIT_MAX + tri->digits[i];
    }
    if (tri->sign) value = -value;
    *result = value;
    return TRIT_OK;
}
